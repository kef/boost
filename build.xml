<?xml version="1.0" encoding="UTF-8"?>

<!-- FIXME: SC502 SPLIT INTO SEPARATE FILES BASED ON FUNCTIONALITY !!!!!!!!!!!!!!! -->
<!-- FIXME: Where is Andy's refactoring chocolate ? -->

<!-- FIXME: SC999 NEW FEATURES: Thread conversion to string (target exceptions, proxies...) -->
<!-- FIXME: SC999 NEW FEATURES: A top level thread executor. -->


<!-- FIXME: SC502 Create Kickstart IntelliJ project and module files for each pair. -->

<!-- FIXME: SC502 Goals: -->
<!-- FIXME: SC502 Run "other" tests against raw classes (integration, acceptance) -->
<!-- FIXME: SC502 Generate javadoc (if you're doing this) -->
<!-- FIXME: SC502 Move from JDK 1.5 back to JDK 1.4 compliance target -->
<!-- FIXME: SC502 Add script(s) to run build from the command line? JUnit needs to be in Ant classpath. -->
<!-- FIXME: SC502 Check environment properties (fail if not correctly set) -->
<!-- FIXME: SC502 Include profile (properties). One property should specify a properties file somewhere, usually under <project>/conf/profile -->

<!-- FIXME: SC502 Refactors: -->
<!-- FIXME: SC502 Order targets in file alphabetically or functionally or chronologically ... not randomly -->
<!-- FIXME: SC502 Break build up into separate files and use import to piece it back together. -->
<!-- FIXME: SC502 Get consistent about singular vs plural directory and property names. -->

<project name="boost" default="all" basedir=".">
    <import file="build-init.xml"/>
    <import file="build-checkstyle.xml"/>

    <target name="all" depends="clean,artifacts,compile,instrument,run,report,check,build_jar"/>

    <target name="run" depends="run_tests,run_checkstyle,run_simian"/>
    <target name="report" depends="report_tests,report_coverage"/>
    <target name="check" depends="check_tests,check_coverage,check_checkstyle,check_simian"/>

    <target name="compile">
        <macro_javac srcdir="${edge.src.dir}" destdir="${edge.class.dir}" classpathref="edge.classpath"/>
        <macro_javac srcdir="${core.src.dir}" destdir="${core.class.dir}" classpathref="core.classpath"/>
        <macro_javac srcdir="${test.src.dir}" destdir="${test.class.dir}" classpathref="test.classpath"/>
    </target>

    <macrodef name="macro_javac">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="classpathref"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <javac srcdir="@{srcdir}" destdir="@{destdir}" classpathref="@{classpathref}" debug="true"/>
        </sequential>
    </macrodef>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <!-- FIXME: SC502 API jar which contains just Primordial? -->
    <target name="build_jar">
        <!-- FIXME: SC502 boost-run.jar which contains ONLY edge/core. -->
        <mkdir dir="${jars.dir}"/>
        <jar jarfile="${jars.dir}/boost.jar">
            <fileset dir="${core.class.dir}" includes="**"/>
            <fileset dir="${edge.class.dir}" includes="**"/>
            <fileset dir="${test.class.dir}" includes="**"/>
            <fileset dir="${core.src.dir}" includes="**"/>
            <fileset dir="${edge.src.dir}" includes="**"/>
            <fileset dir="${test.src.dir}" includes="**"/>
        </jar>
    </target>

    <target name="artifacts">
        <copy file="${build.config.dir}/artifacts.html" tofile="${artifacts.dir}/index.html">
            <filterset>
                <filter token="BUILD_LABEL" value="${label}"/>
            </filterset>
        </copy>
    </target>

    <target name="run_tests">
        <macro_junit_run tests.refid="atomic.tests" classpath.refid="core.coverage.classpath" coverage.type="core"
                         failure.property="atomic.tests.failed"/>
    </target>

    <target name="report_tests">
        <macro_junit_report/>
    </target>

    <target name="check_tests">
        <!-- FIXME: SC502 junit.@{code.type}.failed. -->
        <macro_junit_check failure.property="atomic.tests.failed"/>
    </target>

    <macrodef name="macro_junit_run">
        <attribute name="tests.refid"/>
        <attribute name="classpath.refid"/>
        <attribute name="coverage.type"/>
        <attribute name="failure.property"/>
        <sequential>
            <mkdir dir="${test.xml.report.dir}"/>
            <junit fork="true" forkmode="perBatch" showoutput="true" printSummary="true" haltonfailure="false"
                   failureproperty="@{failure.property}">
                <!-- FIXME: SC502 Parameterise the coverage file for different test styles. -->
                <sysproperty key="net.sourceforge.cobertura.datafile"
                             file="${coverage.dir}/@{coverage.type}_coverage.ser"/>
                <classpath refid="@{classpath.refid}"/>
                <formatter type="xml"/>
                <formatter type="plain"/>
                <batchtest todir="${test.xml.report.dir}">
                    <fileset refid="@{tests.refid}"/>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="macro_junit_report">
        <sequential>
            <junitreport todir="${test.report.dir}" tofile="TestReport.xml">
                <!-- FIXME: SC502 Move fileset out.  -->
                <fileset dir="${test.xml.report.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${test.report.dir}"/>
            </junitreport>
        </sequential>
    </macrodef>

    <macrodef name="macro_junit_check">
        <attribute name="failure.property"/>
        <sequential>
            <!-- FIXME: SC502 Use code.type instead? Does this match the model? -->
            <fail if="@{failure.property}" message="One or more tests failed [@{failure.property}]."/>
        </sequential>
    </macrodef>

    <target name="instrument">
        <macro_cobertura_instrument code.type="core"/>
    </target>

    <target name="report_coverage">
        <macro_cobertura_report code.type="core" report.type="atomic"/>
    </target>

    <target name="check_coverage">
        <macro_cobertura_check code.type="core" branch.limit="100" line.limit="100"/>
        <!-- Approach "du jour" is to not run coverage on "edge".  -->
    </target>

    <!-- FIXME: SC502 Move from top level into a target depended on by others. -->
    <taskdef resource="tasks.properties" classpathref="cobertura.classpath"/>

    <macrodef name="macro_cobertura_instrument">
        <attribute name="code.type"/>
        <sequential>
            <mkdir dir="${instrumented.dir}/@{code.type}"/>
            <cobertura-instrument todir="${instrumented.dir}/@{code.type}"
                                  datafile="${coverage.dir}/@{code.type}_coverage.ser">
                <fileset dir="${classes.dir}/@{code.type}">
                    <include name="**/*.class"/>
                    <exclude name="**/Xxx*.class"/>
                </fileset>
            </cobertura-instrument>
        </sequential>
    </macrodef>

    <macrodef name="macro_cobertura_report">
        <attribute name="code.type"/>
        <attribute name="report.type"/>
        <sequential>
            <mkdir dir="${coverage.reports.dir}/@{code.type}/@{report.type}"/>
            <cobertura-report destdir="${coverage.reports.dir}/@{code.type}/@{report.type}"
                              datafile="${coverage.dir}/@{code.type}_coverage.ser">
                <!-- FIXME: SC502 Parameterise -->
                <fileset dir="${core.src.dir}" includes="**/*.java"/>
            </cobertura-report>
        </sequential>
    </macrodef>

    <macrodef name="macro_cobertura_check">
        <attribute name="branch.limit"/>
        <attribute name="line.limit"/>
        <attribute name="code.type"/>
        <sequential>
            <!-- FIXME: SC502 Don't halt on failure. Follow with a <fail> task with a message consistent with other failures. -->
            <cobertura-check totalbranchrate="@{branch.limit}" totallinerate="@{line.limit}"
                             failureproperty="coverage.@{code.type}.failed" haltonfailure="true"
                             datafile="${coverage.dir}/@{code.type}_coverage.ser"/>
        </sequential>
    </macrodef>

    <target name="quality" depends="run_checkstyle,run_simian,check_checkstyle,check_simian"/>

    <target name="checkstyle" depends="run_checkstyle,check_checkstyle"/>


    <target name="simian" depends="run_simian,check_simian"/>

    <target name="run_simian">
        <macro_run_simian code.type="boost"/>
        <macro_run_simian code.type="boo"/>
        <macro_run_simian code.type="monster"/>
        <macro_run_simian code.type="rah"/>
        <macro_run_simian code.type="scream"/>
    </target>

    <target name="check_simian">
        <macro_check_simian code.type="boost"/>
        <macro_check_simian code.type="boo"/>
        <macro_check_simian code.type="monster"/>
        <macro_check_simian code.type="rah"/>
        <macro_check_simian code.type="scream"/>
    </target>

    <!-- FIXME: SC502 Remove remaining duplication reports by Simian - see exclusions in fileset. -->
    <macrodef name="macro_run_simian">
        <attribute name="code.type"/>
        <sequential>
            <mkdir dir="${simian.report.dir}"/>
            <taskdef resource="simiantask.properties" classpathref="simian.class.path"/>
            <!-- FIXME: SC502 Experiment with ignore options to strengthen check. -->
            <simian threshold="4" language="java" balanceParentheses="true" balanceSquareBrackets="true"
                    failureProperty="simian.@{code.type}.failed">
                <fileset refid="simian.@{code.type}.code"/>
                <formatter type="xml" tofile="${simian.report.dir}/simian-@{code.type}.xml"/>
                <formatter type="plain"/>
            </simian>
            <style in="${simian.report.dir}/simian-@{code.type}.xml" out="${simian.report.dir}/simian-@{code.type}.html"
                   style="${simian.config.dir}/simian.xsl"/>
        </sequential>
    </macrodef>

    <macrodef name="macro_check_simian">
        <attribute name="code.type"/>
        <sequential>
            <fail if="simian.@{code.type}.failed" message="Simian detected duplication [@{code.type}]."/>
        </sequential>
    </macrodef>

</project>

<?xml version="1.0" encoding="UTF-8"?>

<!-- FIXME: SC518 SPLIT INTO SEPARATE FILES BASED ON FUNCTIONALITY !!!!!!!!!!!!!!! -->

<!-- FIXME: SC502 Create Kickstart IntelliJ project and module files for each pair. -->

<!-- FIXME: SC502 Goals: -->
<!-- FIXME: SC502 Run "other" tests against raw classes (integration, acceptance) -->
<!-- FIXME: SC502 Generate javadoc (if you're doing this) -->
<!-- FIXME: SC502 Move from JDK 1.5 back to JDK 1.4 compliance target -->
<!-- FIXME: SC502 Add script(s) to run build from the command line? JUnit needs to be in Ant classpath. -->
<!-- FIXME: SC502 Check environment properties (fail if not correctly set) -->
<!-- FIXME: SC502 Include profile (properties). One property should specify a properties file somewhere, usually under <project>/conf/profile -->

<!-- FIXME: SC502 Refactors: -->
<!-- FIXME: SC518 Order targets in file alphabetically or functionally or chronologically ... not randomly -->

<project name="boost" default="all" basedir=".">
    <import file="build-init.xml"/>
    <import file="build-checkstyle.xml"/>
    <import file="build-cobertura.xml"/>
    <import file="build-junit.xml"/>
    <import file="build-simian.xml"/>

    <target name="all" depends="clean,artifacts,compile,instrument,run,report,check,build_jar"/>

    <target name="run" depends="run_tests,run_checkstyle,run_simian"/>
    <target name="report" depends="report_tests,report_coverage"/>
    <target name="check" depends="check_tests,check_coverage,check_checkstyle,check_simian"/>

    <target name="compile">
        <macro_javac srcdir="${edge.src.dir}" destdir="${edge.class.dir}" classpathref="edge.classpath"/>
        <macro_javac srcdir="${core.src.dir}" destdir="${core.class.dir}" classpathref="core.classpath"/>
        <macro_javac srcdir="${test.src.dir}" destdir="${test.class.dir}" classpathref="test.classpath"/>
    </target>

    <macrodef name="macro_javac">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="classpathref"/>
        <sequential>
            <mkdir dir="@{destdir}"/>
            <javac srcdir="@{srcdir}" destdir="@{destdir}" classpathref="@{classpathref}" debug="true"/>
        </sequential>
    </macrodef>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <!-- FIXME: SC502 API jar which contains just Primordial? -->
    <target name="build_jar">
        <!-- FIXME: SC502 boost-run.jar which contains ONLY edge/core. -->
        <mkdir dir="${jars.dir}"/>
        <jar jarfile="${jars.dir}/boost.jar">
            <fileset dir="${core.class.dir}" includes="**"/>
            <fileset dir="${edge.class.dir}" includes="**"/>
            <fileset dir="${test.class.dir}" includes="**"/>
            <fileset dir="${core.src.dir}" includes="**"/>
            <fileset dir="${edge.src.dir}" includes="**"/>
            <fileset dir="${test.src.dir}" includes="**"/>
        </jar>
    </target>

    <target name="artifacts">
        <copy file="${build.config.dir}/artifacts.html" tofile="${artifacts.dir}/index.html">
            <filterset>
                <filter token="BUILD_LABEL" value="${label}"/>
            </filterset>
        </copy>
    </target>

    <target name="run_tests">
        <macro_junit_run tests.refid="atomic.tests" classpath.refid="core.coverage.classpath" coverage.type="core"
                         failure.property="atomic.tests.failed"/>
    </target>

    <target name="report_tests">
        <macro_junit_report/>
    </target>

    <target name="check_tests">
        <!-- FIXME: SC502 junit.@{code.type}.failed. -->
        <macro_junit_check failure.property="atomic.tests.failed"/>
    </target>

    <macrodef name="macro_junit_run">
        <attribute name="tests.refid"/>
        <attribute name="classpath.refid"/>
        <attribute name="coverage.type"/>
        <attribute name="failure.property"/>
        <sequential>
            <mkdir dir="${test.xml.report.dir}"/>
            <junit fork="true" forkmode="perBatch" showoutput="true" printSummary="true" haltonfailure="false"
                   failureproperty="@{failure.property}">
                <!-- FIXME: SC502 Parameterise the coverage file for different test styles. -->
                <sysproperty key="net.sourceforge.cobertura.datafile"
                             file="${coverage.dir}/@{coverage.type}_coverage.ser"/>
                <classpath refid="@{classpath.refid}"/>
                <formatter type="xml"/>
                <formatter type="plain"/>
                <batchtest todir="${test.xml.report.dir}">
                    <fileset refid="@{tests.refid}"/>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="macro_junit_report">
        <sequential>
            <junitreport todir="${test.report.dir}" tofile="TestReport.xml">
                <!-- FIXME: SC502 Move fileset out.  -->
                <fileset dir="${test.xml.report.dir}">
                    <include name="TEST-*.xml"/>
                </fileset>
                <report format="frames" todir="${test.report.dir}"/>
            </junitreport>
        </sequential>
    </macrodef>

    <macrodef name="macro_junit_check">
        <attribute name="failure.property"/>
        <sequential>
            <!-- FIXME: SC502 Use code.type instead? Does this match the model? -->
            <fail if="@{failure.property}" message="One or more tests failed [@{failure.property}]."/>
        </sequential>
    </macrodef>

    <target name="quality" depends="run_checkstyle,run_simian,check_checkstyle,check_simian"/>
</project>
